import disnake
from disnake import ButtonStyle
from disnake.ext import commands
from disnake.ext.commands import MissingPermissions  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
import pymysql  # –ò—Å–ø–æ–ª—å–∑—É–µ–º pymysql –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MySQL
import os
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
MODER_ROLES = [int(role_id) for role_id in os.getenv('MODER_ROLES').split(',')]
TICKET_CATEGORY_ID = int(os.getenv('TICKET_CATEGORY_ID'))
CLOSED_TICKET_CATEGORY_ID = int(os.getenv('CLOSED_TICKET_CATEGORY_ID'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
MYSQL_HOST = os.getenv('MYSQL_HOST', 'localhost')
MYSQL_USER = os.getenv('MYSQL_USER', '')
MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD', '')
MYSQL_DB = os.getenv('MYSQL_DB_ticket', 'ticket_system')

def get_db_connection():
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL."""
    return pymysql.connect(
        host=MYSQL_HOST,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        database=MYSQL_DB,
        cursorclass=pymysql.cursors.DictCursor
    )

class clb(disnake.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=None)
        self.bot = bot

    @disnake.ui.button(label="–£–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç", style=ButtonStyle.danger, emoji='<:ticketbutton:933130024356302898>', custom_id="delete_ticket")
    async def delete_ticket(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if any(role.id in MODER_ROLES for role in interaction.author.roles):
            connection = get_db_connection()
            try:
                with connection.cursor() as cursor:
                    cursor.execute('DELETE FROM tickets WHERE id_channel = %s', (interaction.channel.id,))
                    connection.commit()
                await interaction.channel.delete()
            finally:
                connection.close()
        else:
            await interaction.send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)

    @disnake.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=ButtonStyle.primary, emoji='<:ticketbutton:933130024356302898>', custom_id="close_ticket")
    async def close_ticket(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if any(role.id in MODER_ROLES for role in interaction.author.roles):
            connection = get_db_connection()
            try:
                with connection.cursor() as cursor:
                    cursor.execute('SELECT id_member FROM tickets WHERE id_channel = %s', (interaction.channel.id,))
                    a = cursor.fetchone()
                    cursor.execute('DELETE FROM tickets WHERE id_channel = %s', (interaction.channel.id,))
                    connection.commit()

                    if a:
                        try:
                            member = await interaction.guild.fetch_member(a['id_member'])
                            overwrites = {
                                interaction.guild.default_role: disnake.PermissionOverwrite(view_channel=False, send_messages=False),
                                member: disnake.PermissionOverwrite(view_channel=False),
                            }
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                            for role_id in MODER_ROLES:
                                role = disnake.utils.get(interaction.guild.roles, id=role_id)
                                if role:
                                    overwrites[role] = disnake.PermissionOverwrite(view_channel=True)

                            category = self.bot.get_channel(CLOSED_TICKET_CATEGORY_ID)
                            if category:
                                await interaction.channel.edit(category=category, overwrites=overwrites)
                                await interaction.send("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
                                await interaction.message.delete()
                            else:
                                await interaction.send("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
                        except disnake.NotFound:
                            await interaction.send("–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.", ephemeral=True)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
                            await interaction.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.", ephemeral=True)
                    else:
                        await interaction.send("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)
            finally:
                connection.close()
        else:
            await interaction.send("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)


class ticket_buttons(disnake.ui.View):
    def __init__(self, bot):
        self.bot = bot
        super().__init__(timeout=None)

    @disnake.ui.button(label="–û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=ButtonStyle.primary, emoji='<:ticketbutton:933130024356302898>', custom_id="open_ticket")
    async def open_ticket(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        connection = get_db_connection()
        try:
            with connection.cursor() as cursor:
                cursor.execute('SELECT id_member FROM tickets WHERE id_member = %s', (interaction.author.id,))
                a1 = cursor.fetchone()

                if a1 is None:
                    guild = interaction.guild
                    overwrites = {
                        guild.default_role: disnake.PermissionOverwrite(view_channel=False),
                        interaction.author: disnake.PermissionOverwrite(view_channel=True),
                    }
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                    for role_id in MODER_ROLES:
                        role = disnake.utils.get(interaction.guild.roles, id=role_id)
                        if role:
                            overwrites[role] = disnake.PermissionOverwrite(view_channel=True)

                    category = self.bot.get_channel(TICKET_CATEGORY_ID)
                    if category:
                        ticket_channel = await guild.create_text_channel(
                            name=f"–¢–∏–∫–µ—Ç-{interaction.author.name}".replace(" ", "_"),
                            category=category,
                            overwrites=overwrites
                        )
                        cursor.execute('INSERT INTO tickets (id_member, id_channel) VALUES (%s, %s)', (interaction.author.id, ticket_channel.id))
                        connection.commit()

                        ticket_embed = disnake.Embed(
                            title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                            colour=0x2F3136,
                            description=(
                                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {interaction.author.mention} ({interaction.author.name})! üëã\n\n"
                                "–ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–æ–π. –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, "
                                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º—ã —Å–º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å.\n\n"
                                "**–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n"
                                "1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.\n"
                                "2. –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–∏–º–µ—Ä—ã).\n"
                                "3. –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                                "‚è≥ *–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –Ω–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 10‚Äì15 –º–∏–Ω—É—Ç. "
                                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ!*\n\n"
                                "–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ."
                            )
                        )
                        await ticket_channel.send(embed=ticket_embed, view=clb(bot=self.bot))
                        await interaction.send(f"–í–∞—à —Ç–∏–∫–µ—Ç: {ticket_channel.mention}", ephemeral=True)
                    else:
                        await interaction.send("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
                else:
                    cursor.execute('SELECT id_channel FROM tickets WHERE id_member = %s', (interaction.author.id,))
                    channel1 = cursor.fetchone()
                    if channel1:
                        await interaction.send(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∏–∫–µ—Ç - <#{channel1['id_channel']}>, –±—É–¥—å—Ç–µ —Ç–µ—Ä–ø–∏–ª–∏–≤–µ–µ, –æ–∂–∏–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é.", ephemeral=True)
                    else:
                        await interaction.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞.", ephemeral=True)
        finally:
            connection.close()


class ticket_system(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.persistent_views_added = False

    @commands.Cog.listener()
    async def on_member_remove(self, member: disnake.Member):
        connection = get_db_connection()
        try:
            with connection.cursor() as cursor:
                cursor.execute('SELECT id_channel FROM tickets WHERE id_member = %s', (member.id,))
                check1 = cursor.fetchone()
                if check1:
                    cursor.execute('DELETE FROM tickets WHERE id_member = %s', (member.id,))
                    connection.commit()
                    channel = self.bot.get_channel(check1['id_channel'])
                    if channel:
                        await channel.send(f"{member.name}, –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä, <@403829627753070603>")
        finally:
            connection.close()

    @commands.has_permissions(administrator=True)
    @commands.slash_command(description="Setup —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ (–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)")
    async def tstart(self, ctx):
        connection = get_db_connection()
        try:
            with connection.cursor() as cursor:
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS tickets (
                        id_member BIGINT,
                        id_channel BIGINT
                    )
                ''')
                connection.commit()
            tstartembed = disnake.Embed(
                title="–£—Å–ø–µ—Ö",
                colour=0x2F3136,
                description="–¢–∏–∫–µ—Ç –±–æ—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã, –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–∏–∫–µ—Ç–æ–≤ ``/ticket``"
            )
            await ctx.send(embed=tstartembed)
        finally:
            connection.close()

    @tstart.error
    async def tstart_error(self, ctx, error):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã tstart."""
        if isinstance(error, MissingPermissions):
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        else:
            await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ tstart: {error}")

    @commands.Cog.listener()
    async def on_ready(self):
        if not self.persistent_views_added:
            self.bot.add_view(ticket_buttons(bot=self.bot))
            self.bot.add_view(clb(bot=self.bot))
            self.persistent_views_added = True

    @commands.slash_command(description="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é (–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)")
    @commands.has_permissions(administrator=True)
    async def add_ticket_button(self, ctx, message_id: str):
        try:
            message_id = int(message_id)
            channel = ctx.channel
            message = await channel.fetch_message(message_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not message.components:
                await message.edit(view=ticket_buttons(bot=self.bot))
                await ctx.send("–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.", ephemeral=True)
            else:
                await ctx.send("–ù–∞ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∂–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞.", ephemeral=True)
        except disnake.NotFound:
            await ctx.send("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
            await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.", ephemeral=True)

    @add_ticket_button.error
    async def add_ticket_button_error(self, ctx, error):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã add_ticket_button."""
        if isinstance(error, MissingPermissions):
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        else:
            await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ add_ticket_button: {error}")


def setup(bot):
    bot.add_cog(ticket_system(bot))