import disnake
from disnake.ext import commands
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UserInfo(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    async def user(self, interaction: disnake.ApplicationCommandInteraction, member: disnake.Member = None):
        try:
            if member is None:
                member = interaction.author

            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            roles = [role for role in member.roles if role.name != "@everyone"]
            roles_text = ", ".join(role.mention for role in roles) if roles else "–ù–µ—Ç —Ä–æ–ª–µ–π"

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status = str(member.status)
            status_emoji = {
                "online": "üü¢",
                "idle": "üü°",
                "dnd": "üî¥",
                "offline": "‚ö´"
            }.get(status, "‚ö´")

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            activity = member.activity
            activity_text = f"**{activity.name}** ({activity.type})" if activity else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

            # –°–æ–∑–¥–∞–µ–º Embed
            embed = disnake.Embed(
                title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {member.name}",
                color=member.color if member.color else disnake.Color.blurple()
            )
            embed.set_thumbnail(url=member.display_avatar.url)
            embed.add_field(name="ID", value=member.id, inline=True)
            embed.add_field(name="–ù–∏–∫–Ω–µ–π–º", value=member.display_name, inline=True)
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=f"{status_emoji} {status.capitalize()}", inline=True)
            embed.add_field(name="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", value=activity_text, inline=False)
            embed.add_field(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", value=member.created_at.strftime("%d.%m.%Y %H:%M:%S"), inline=True)
            embed.add_field(name="–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä", value=member.joined_at.strftime("%d.%m.%Y %H:%M:%S"), inline=True)
            embed.add_field(name="–†–æ–ª–∏", value=roles_text if len(roles_text) <= 1024 else "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", inline=False)
            embed.add_field(name="–í—ã—Å—à–∞—è —Ä–æ–ª—å", value=member.top_role.mention, inline=True)
            embed.add_field(name="–ë–æ—Ç?", value="–î–∞" if member.bot else "–ù–µ—Ç", inline=True)

            await interaction.response.send_message(embed=embed)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ user: {e}")
            await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.", ephemeral=True)

def setup(bot):
    bot.add_cog(UserInfo(bot))