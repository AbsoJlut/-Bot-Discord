import disnake
from disnake.ext import commands, tasks
from disnake.ui import Button, View
from datetime import datetime, timedelta
import random
import pymysql
import logging
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

class Giveaway(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.giveaways = {}
        self.db = self.connect_to_database()
        self.create_tables()
        self.load_giveaways_on_startup()
        self.check_giveaways.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL."""
        try:
            connection = pymysql.connect(
                host=os.getenv("MYSQL_HOST"),  # –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user=os.getenv("MYSQL_USER"),  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                password=os.getenv("MYSQL_PASSWORD"),  # –ü–∞—Ä–æ–ª—å
                database=os.getenv("MYSQL_DB_giveaway"),  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                cursorclass=pymysql.cursors.DictCursor
            )
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL.")
            return connection
        except pymysql.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        if self.db:
            try:
                with self.db.cursor() as cursor:
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS giveaways (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            message_id BIGINT,
                            channel_id BIGINT,
                            end_time DATETIME,
                            winners INT,
                            prize VARCHAR(255),
                            participants TEXT
                        )
                    """)
                    self.db.commit()
                    logger.info("–¢–∞–±–ª–∏—Ü–∞ giveaways —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            except pymysql.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

    def load_giveaways_on_startup(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        if self.db:
            try:
                with self.db.cursor() as cursor:
                    cursor.execute("SELECT * FROM giveaways WHERE end_time > NOW()")
                    giveaways = cursor.fetchall()
                    for giveaway in giveaways:
                        participants = list(map(int, giveaway["participants"].split(","))) if giveaway["participants"] else []
                        self.giveaways[giveaway["id"]] = {
                            "message_id": giveaway["message_id"],
                            "channel_id": giveaway["channel_id"],  # –ó–∞–≥—Ä—É–∂–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
                            "end_time": giveaway["end_time"],
                            "winners": giveaway["winners"],
                            "prize": giveaway["prize"],
                            "participants": participants,
                            "button": Button(style=disnake.ButtonStyle.green, label="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", custom_id=f"giveaway_{giveaway['id']}_participate"),
                            "view_participants_button": Button(style=disnake.ButtonStyle.blurple, label="–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", custom_id=f"giveaway_{giveaway['id']}_view_participants")
                        }
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(giveaways)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            except pymysql.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    @commands.slash_command(name="giveaway", description="–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
    @commands.has_permissions(administrator=True)
    async def giveaway(
        self,
        inter: disnake.ApplicationCommandInteraction,
        duration: int = commands.Param(description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö"),
        winners: int = commands.Param(description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"),
        prize: str = commands.Param(description="–ü—Ä–∏–∑")
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞."""
        end_time = datetime.now() + timedelta(minutes=duration)
        giveaway_id = random.randint(1000, 9999)

        embed = disnake.Embed(
            title=f"üéâ –†–æ–∑—ã–≥—Ä—ã—à: {prize} üéâ",
            description=f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:** {winners}\n"
                        f"**–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è:** <t:{int(end_time.timestamp())}:R>\n"
                        f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** 0",
            color=disnake.Color.green()
        )
        embed.set_footer(text=f"ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {giveaway_id}")

        # –ö–Ω–æ–ø–∫–∏
        participate_button = Button(style=disnake.ButtonStyle.green, label="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", custom_id=f"giveaway_{giveaway_id}_participate")
        view_participants_button = Button(style=disnake.ButtonStyle.blurple, label="–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", custom_id=f"giveaway_{giveaway_id}_view_participants")

        view = View()
        view.add_item(participate_button)
        view.add_item(view_participants_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
        await inter.send(embed=embed, view=view)
        message = await inter.original_message()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.save_giveaway_to_db(giveaway_id, message.id, inter.channel_id, end_time, winners, prize)

        self.giveaways[giveaway_id] = {
            "message_id": message.id,
            "channel_id": inter.channel_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞
            "end_time": end_time,
            "winners": winners,
            "prize": prize,
            "participants": [],
            "button": participate_button,
            "view_participants_button": view_participants_button
        }

    def save_giveaway_to_db(self, giveaway_id, message_id, channel_id, end_time, winners, prize):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.db:
            try:
                with self.db.cursor() as cursor:
                    cursor.execute("""
                        INSERT INTO giveaways (id, message_id, channel_id, end_time, winners, prize, participants)
                        VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """, (giveaway_id, message_id, channel_id, end_time, winners, prize, ""))
                    self.db.commit()
                    logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {giveaway_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            except pymysql.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def delete_giveaway_from_db(self, giveaway_id):
        """–£–¥–∞–ª—è–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if self.db:
            try:
                with self.db.cursor() as cursor:
                    cursor.execute("DELETE FROM giveaways WHERE id = %s", (giveaway_id,))
                    self.db.commit()
                    logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {giveaway_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            except pymysql.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    @commands.slash_command(name="cancel_giveaway", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
    @commands.has_permissions(administrator=True)
    async def cancel_giveaway(self, inter: disnake.ApplicationCommandInteraction, giveaway_id: int):
        """–û—Ç–º–µ–Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞."""
        if giveaway_id in self.giveaways:
            del self.giveaways[giveaway_id]
            self.delete_giveaway_from_db(giveaway_id)
            await inter.send(f"–†–æ–∑—ã–≥—Ä—ã—à {giveaway_id} –æ—Ç–º–µ–Ω–µ–Ω.", ephemeral=True)
            logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {giveaway_id} –æ—Ç–º–µ–Ω–µ–Ω.")
        else:
            await inter.send("–†–æ–∑—ã–≥—Ä—ã—à —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

    @commands.slash_command(name="extend_giveaway", description="–ü—Ä–æ–¥–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")
    @commands.has_permissions(administrator=True)
    async def extend_giveaway(
        self,
        inter: disnake.ApplicationCommandInteraction,
        giveaway_id: int,
        additional_time: int = commands.Param(description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö")
    ):
        """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞."""
        if giveaway_id in self.giveaways:
            self.giveaways[giveaway_id]["end_time"] += timedelta(minutes=additional_time)
            await inter.send(
                f"–í—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ {additional_time} –º–∏–Ω—É—Ç.", ephemeral=True
            )
            logger.info(f"–í—Ä–µ–º—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ {additional_time} –º–∏–Ω—É—Ç.")
        else:
            await inter.send("–†–æ–∑—ã–≥—Ä—ã—à —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

    @tasks.loop(seconds=10)
    async def check_giveaways(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π."""
        for giveaway_id, giveaway_data in list(self.giveaways.items()):
            if datetime.now() >= giveaway_data["end_time"]:
                participants = giveaway_data["participants"]
                winners_count = giveaway_data["winners"]
                prize = giveaway_data["prize"]

                if participants:
                    winners = random.sample(participants, min(winners_count, len(participants)))
                    winners_mention = ", ".join([f"<@{winner}>" for winner in winners])
                    result_embed = disnake.Embed(
                        title=f"üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ",
                        description=f"**–ü—Ä–∏–∑:** {prize}\n"
                                    f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:** {winners_mention}",
                        color=disnake.Color.gold()
                    )
                else:
                    result_embed = disnake.Embed(
                        title=f"üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ",
                        description="**–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.**",
                        color=disnake.Color.red()
                    )

                # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                channel = self.bot.get_channel(giveaway_data["channel_id"])
                if channel:
                    try:
                        message = await channel.fetch_message(giveaway_data["message_id"])
                        await message.edit(embed=result_embed, view=None)
                    except disnake.NotFound:
                        logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {giveaway_data['message_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ {channel.id}.")
                    except disnake.Forbidden:
                        logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel.id}.")
                else:
                    logger.error(f"–ö–∞–Ω–∞–ª —Å ID {giveaway_data['channel_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                # –£–¥–∞–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏–∑ –ø–∞–º—è—Ç–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                del self.giveaways[giveaway_id]
                self.delete_giveaway_from_db(giveaway_id)

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        if not inter.component.custom_id:
            return

        giveaway_id = int(inter.component.custom_id.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ custom_id
        giveaway_data = self.giveaways.get(giveaway_id)

        if not giveaway_data:
            await inter.response.send_message("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return

        if "participate" in inter.component.custom_id:
            if inter.author.id not in giveaway_data["participants"]:
                giveaway_data["participants"].append(inter.author.id)
                embed = inter.message.embeds[0]
                embed.description = embed.description.replace(
                    f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {len(giveaway_data['participants']) - 1}",
                    f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {len(giveaway_data['participants'])}"
                )
                await inter.response.edit_message(embed=embed)
                # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É —á–µ—Ä–µ–∑ followup
                await inter.followup.send(f"–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üéâ", ephemeral=True)
            else:
                await inter.response.send_message("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", ephemeral=True)
        elif "view_participants" in inter.component.custom_id:
            participants = giveaway_data["participants"]
            if participants:
                participants_mention = ", ".join([f"<@{participant}>" for participant in participants])
                participants_embed = disnake.Embed(
                    title="–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
                    description=participants_mention,
                    color=disnake.Color.blue()
                )
                await inter.response.send_message(embed=participants_embed, ephemeral=True)
            else:
                await inter.response.send_message("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", ephemeral=True)

    @giveaway.error
    async def giveaway_error(self, inter: disnake.ApplicationCommandInteraction, error):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã giveaway."""
        if isinstance(error, commands.MissingPermissions):
            if not inter.response.is_done():
                await inter.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        else:
            if not inter.response.is_done():
                await inter.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True)
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ giveaway: {error}")

def setup(bot):
    bot.add_cog(Giveaway(bot))